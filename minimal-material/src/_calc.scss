/// Expression with 1 operator
@function e($a, $operator, $b, $withBrackets: false) {
  @if (type-of($a) == string) or (type-of($b) == string) {
    $exp: "#{$a} #{$operator} #{$b}";
    @return if($withBrackets, "(#{$exp})", $exp);
  } @else {
    @if $operator == "+" {
      @return $a + $b;
    } @else if $operator == "-" {
      @return $a - $b;
    } @else if $operator == "*" {
      @return $a * $b;
    } @else if $operator == "/" {
      @return $a / $b;
    } @else {
      @error "Unknown operator '#{operator}'";
    }
  } 
}

/// Add brackets only if expression
@function b($value) {
  @return if(
    type-of($value) == string,
    "(#{$value})",
    $value
  );
}

/// `calc` on demand
@function c($e) {
  @return if(type-of($e) == string, calc(#{$e}), $e);
}

/// Shortcut for `c(e(...))` - usage CSS' `calc` on demand
@function ce($a, $operator, $b, $withBrackets: false) {
  @return c(e($a, $operator, $b, $withBrackets));
}

/// Multiproduct
@function m($members...) {
 @return es("*", $members...);
}

/// Sum
@function s($members...) {
  @return es("+", $members...);
 }
 
/// Expression on 1 operator and any count of members
@function es($operator, $members...) {
  $number: null;
  $string: null;

  @each $member in $members {
    @if type-of($member) == number {
      $number: if(
        $number == null,
        $member,
        e($number, $operator, $member)
      );
    } @else {
      $string: if(
        $string == null,
        $member,
        e($string, $operator, $member)
      );
    }
  } 

  @if $string == null {
    @return $number;
  } @else if $number == 1 {
    @return $string;
  } @else {
    @return e($number, $operator, $string);
  };
}

@function hsl-($hue, $saturation, $lightness, $opacity: null) {
  @if $opacity == 0 {
    @return transparent;
  }

  $h: c($hue);
  $s: ce(100%, "*", $saturation);
  $l: ce(100%, "*", $lightness);

  @if $opacity == null {
    @return hsl($h, $s, $l);  
  } @else {
    @return hsla($h, $s, $l,
      c($opacity)
    );
  }
}

@function rgb-($red, $green, $blue, $opacity: 1) {
  @if $opacity == 0 {
    @return transparent;
  }

  $r: c($red);
  $g: c($green);
  $b: c($blue);
  @if $opacity == 1 {
    @return rgb($r, $g, $b);  
  } @else {
    @return rgba($r, $g, $b,
      c($opacity)
    );
  }
}

@function rgb-mix(
  $r1, $g1, $b1,
  $r2, $g2, $b2,
  $m
) {
  // $g2 * $m + $g1 - $g1* $m,
  // $m * ($b2 - $b1) + $b1 => s(m($m, e($b2, "-", $b1)), $b1)

  $r: s(m($m, e($r2, "-", $r1)), $r1);
  $g: s(m($m, e($g2, "-", $g1)), $g1);
  $b: s(m($m, e($b2, "-", $b1)), $b1);

  @if $r == 101 {
    @debug "rs" $r1 $r2;
    @debug "e" e($r2, "-", $r1);
    @debug "m" m($m, e($r2, "-", $r1));
    @debug "s" s(m($m, e($r2, "-", $r1)), $r1);
  }

  @return rgb-($r,$g,$b);
}

