@mixin resize-style(
  $controller: ".resize-controller",
  $container: ".resize-container",
  $size: var(--resize-controller-size),
  // Big enough values to have controller not less than container, while '100%' is not working
  $height: 100vh,
  $width: 100vw
) {
  #{$controller} {
    // Check resizer.html to see why other options are not satisfying  
    overflow: scroll;
    &::-webkit-resizer {
      opacity: 0; // or color: transparent;
    }
  }

  #{$container} {
    $places: left, right, top, bottom;
    @each $place in $places {
      &-#{$place} {
        // Container takes controller's width-height and propagate to children. Be careful with display: content;
        overflow: hidden;
        display: grid;
        &::before, &::after, & > * {
          grid-column: 1;
          grid-row: 1;      
        }

        // A way to make controller as strip
        padding-#{$place}: #{$size};
        & > #{$controller} {
          margin-#{$place}: calc(-1 * #{$size}); 
        }

        // Move controller to backstage
        &::before, &::after, & > :not(#{$controller}) {
          z-index: 1;
        }
        // NB: 'Controller' skin should be transparent - don't forget if own element is used 
        &::before, &::after {
          pointer-events: none;
        }
      }
    }
    
    &-left, &-right {
      & > #{$controller} {
        resize: horizontal;
        &::-webkit-scrollbar {
          width: #{$size};
          height: #{$height};      
        }
      }
    }
    &-top, &-bottom {
      & > #{$controller} {
        resize: vertical;
        &::-webkit-scrollbar {
          width: #{$width};
          height: #{$size};
        }      
      }
    }

    // By default scrolls are at right and bottom sides. Obvious transform for desired effect without
    &-left > #{$controller} {
      transform: scaleX(-1);
    }
    &-top > #{$controller} {
      transform: scaleY(-1);
    }
  }
}